# docker-compose.yml
version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - finance-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - finance-network
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - finance-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: finance_db
    environment:
      POSTGRES_DB: financeapp
      POSTGRES_USER: financeuser
      POSTGRES_PASSWORD: financepass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - finance-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U financeuser -d financeapp" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Web Application
  web:
    build: .
    container_name: personal_finance_app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://financeuser:financepass@db:5432/financeapp
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379/0
    networks:
      - finance-network

  # Celery Worker for Background Tasks
  celery:
    build: .
    container_name: celery_worker
    command: celery -A financeapp worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - kafka
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://financeuser:financepass@db:5432/financeapp
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379/0
    networks:
      - finance-network

  # Message Bus Service (for handling distributed messages)
  message-service:
    build: .
    container_name: message_service
    command: python manage.py run_message_service
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://financeuser:financepass@db:5432/financeapp
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379/0
    networks:
      - finance-network

  # Kafka UI for monitoring (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - finance-network

networks:
  finance-network:
    driver: bridge

volumes:
  postgres_data:
